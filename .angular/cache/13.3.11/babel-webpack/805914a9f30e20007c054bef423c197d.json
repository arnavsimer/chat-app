{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2023 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { EventEmitter, LOCALE_ID, Injectable, Inject, Pipe, NgModule } from '@angular/core';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport * as intl from '@progress/kendo-intl';\n/**\n * @hidden\n */\n\nconst packageMetadata = {\n  name: '@progress/kendo-angular-intl',\n  productName: 'Kendo UI for Angular',\n  productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n  publishDate: 1703060483,\n  version: '14.3.0',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/'\n};\nconst DOCS_URL = 'http://www.telerik.com/kendo-angular-ui/components/internationalization/troubleshooting/';\n/**\n * @hidden\n */\n\nconst errorSolutions = {\n  'NoCurrency': `Solution: ${DOCS_URL}#toc-no-currency`,\n  'NoCurrencyDisplay': `Solution: ${DOCS_URL}#toc-no-currency-display`,\n  'NoCurrencyRegion': `Solution: ${DOCS_URL}#toc-no-currency-region`,\n  'NoDateFieldNames': `Solution: ${DOCS_URL}#toc-no-date-filed-names`,\n  'NoFirstDay': `Solution: ${DOCS_URL}#toc-no-first-day`,\n  'NoGMTInfo': `Solution: ${DOCS_URL}#toc-no-gmt-info`,\n  'NoLocale': `Solution: ${DOCS_URL}#toc-no-locale`,\n  'NoValidCurrency': `Solution: ${DOCS_URL}#toc-no-valid-currency`,\n  'NoWeekData': `Solution: ${DOCS_URL}#toc-no-week-data`\n};\n\nfunction formatMessage(error) {\n  const message = error.message;\n  const errorSolution = errorSolutions[Object.keys(errorSolutions).filter(key => message.indexOf(key) === 0)[0]];\n  return errorSolution ? `${message} ${errorSolution}` : message;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction intlMethod(fn) {\n  return function (...values) {\n    try {\n      return fn(...values);\n    } catch (error) {\n      error.message = formatMessage(error);\n      throw error;\n    }\n  };\n}\n/**\n * @hidden\n */\n\n\nconst dateFormatNames = intlMethod(intl.dateFormatNames);\n/**\n * @hidden\n */\n\nconst dateFieldName = intlMethod(intl.dateFieldName);\n/**\n * @hidden\n */\n\nconst firstDay = intlMethod(intl.firstDay);\n/**\n * @hidden\n */\n\nconst format = intlMethod(intl.format);\n/**\n * @hidden\n */\n\nconst formatDate = intlMethod(intl.formatDate);\n/**\n * @hidden\n */\n\nconst formatNumber = intlMethod(intl.formatNumber);\n/**\n * @hidden\n */\n\nconst load = intlMethod(intl.load);\n/**\n * @hidden\n */\n\nconst numberSymbols = intlMethod(intl.numberSymbols);\n/**\n * @hidden\n */\n\nconst parseDate = intlMethod(intl.parseDate);\n/**\n * @hidden\n */\n\nconst parseNumber = intlMethod(intl.parseNumber);\n/**\n * @hidden\n */\n\nconst splitDateFormat = intlMethod(intl.splitDateFormat);\n/**\n * @hidden\n */\n\nconst toString = intlMethod(intl.toString);\n/**\n * @hidden\n */\n\nconst weekendRange = intlMethod(intl.weekendRange);\n/**\n * Sets a pre-built locale.\n *\n * @params data - The pre-built locale data.\n */\n\nconst setData = data => intl.setData(data);\n/**\n * Retrieves the locale data for the specified locale.\n *\n * @params locale - The locale id.\n * @returns data - The locale data.\n */\n\n\nconst localeData = locale => {\n  try {\n    return intl.localeInfo(locale);\n  } catch (error) {\n    error.message = formatMessage(error);\n    throw error;\n  }\n};\n\nconst LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\n\nfunction cldrServiceFactory(localeId) {\n  return new CldrIntlService(localeId);\n}\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\n\n\nlet IntlService = /*#__PURE__*/(() => {\n  class IntlService {\n    /**\n     * @hidden\n     */\n    constructor() {\n      /**\n       * @hidden\n       */\n      this.changes = new EventEmitter();\n      validatePackage(packageMetadata);\n    }\n    /**\n     * Notifies that the service was changed.\n     */\n\n\n    notify() {\n      this.changes.emit();\n    }\n\n  }\n\n  IntlService.ɵfac = function IntlService_Factory(t) {\n    return new (t || IntlService)();\n  };\n\n  IntlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IntlService,\n    factory: function IntlService_Factory(t) {\n      let r = null;\n\n      if (t) {\n        r = new t();\n      } else {\n        r = cldrServiceFactory(i0.ɵɵinject(LOCALE_ID));\n      }\n\n      return r;\n    },\n    providedIn: 'root'\n  });\n  return IntlService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@progress/kendo-intl` package.\n */\n\n\nlet CldrIntlService = /*#__PURE__*/(() => {\n  class CldrIntlService extends IntlService {\n    /**\n     * Creates a new instance of the service with the ID of the specified locale.\n     *\n     * Note that the parts of the locale ID can be separated by either `_` (underscore)\n     * or `-` (dash).\n     *\n     * @param localeId - The default locale ID.\n     */\n    constructor(localeId) {\n      super();\n      this.localeId = localeId;\n    }\n    /**\n     * Gets or sets the current locale ID.\n     */\n\n\n    get localeId() {\n      return this.locale;\n    }\n\n    set localeId(value) {\n      // Angular locales use underscore, for example, en_US\n      // while IETF BCP-47 specifies a dash.\n      // https://tools.ietf.org/html/bcp47\n      const locale = value.replace(LOCALE_REGEX, '-');\n\n      if (locale !== this.locale) {\n        this.locale = locale;\n        this.notify();\n      }\n    }\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n\n\n    format(format$1, ...values) {\n      return format(format$1, values, this.localeId);\n    }\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n\n\n    toString(value, format, localeId) {\n      return toString(value, format, localeId || this.localeId);\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n\n\n    formatDate(value, format, localeId) {\n      return formatDate(value, format, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n\n\n    parseDate(value, format, localeId) {\n      return parseDate(value, format, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n\n\n    parseNumber(value, format, localeId) {\n      return parseNumber(value, localeId || this.localeId, format);\n    }\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n\n\n    formatNumber(value, format, localeId) {\n      return formatNumber(value, format, localeId || this.localeId);\n    }\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n\n\n    dateFieldName(options, localeId) {\n      return dateFieldName(options, localeId || this.localeId);\n    }\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n\n\n    dateFormatNames(options, localeId) {\n      return dateFormatNames(localeId || this.localeId, options);\n    }\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n\n\n    splitDateFormat(format, localeId) {\n      return splitDateFormat(format, localeId || this.localeId);\n    }\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n\n\n    numberSymbols(localeId) {\n      return numberSymbols(localeId || this.localeId);\n    }\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n\n\n    firstDay(localeId) {\n      return firstDay(localeId || this.localeId);\n    }\n    /**\n     * Returns the start and end index of the locale weekend starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The the start and end index of the locale weekend (0 == Sunday).\n     */\n\n\n    weekendRange(localeId) {\n      return weekendRange(localeId || this.localeId);\n    }\n\n  }\n\n  CldrIntlService.ɵfac = function CldrIntlService_Factory(t) {\n    return new (t || CldrIntlService)(i0.ɵɵinject(LOCALE_ID));\n  };\n\n  CldrIntlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CldrIntlService,\n    factory: CldrIntlService.ɵfac\n  });\n  return CldrIntlService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst isNumeric = value => !isNaN(value - parseFloat(value));\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the [IntlService]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\n\n\nlet DatePipe = /*#__PURE__*/(() => {\n  class DatePipe {\n    /**\n     * @hidden\n     */\n    constructor(intlService) {\n      this.intlService = intlService;\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n     * @return - The formatted date.\n     */\n\n\n    transform(value, format = \"\", localeId) {\n      value = this.normalize(value);\n\n      if (value) {\n        return this.intlService.formatDate(value, format, localeId);\n      }\n\n      return value;\n    }\n\n    normalize(value) {\n      if (value && typeof value === 'string') {\n        value = this.intlService.parseDate(value);\n      } else if (value && isNumeric(value)) {\n        value = new Date(parseFloat(value));\n      }\n\n      return value;\n    }\n\n  }\n\n  DatePipe.ɵfac = function DatePipe_Factory(t) {\n    return new (t || DatePipe)(i0.ɵɵdirectiveInject(IntlService, 16));\n  };\n\n  DatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"kendoDate\",\n    type: DatePipe,\n    pure: true\n  });\n  return DatePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Formats a number value to a string based on the requested format.\n * This pipe uses the [`IntlService`]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n *   <ul>\n *     <li>{{decimal | kendoNumber:'c' }}</li>\n *     <li>{{stringNumber | kendoNumber:'p' }}</li>\n *     <li>{{int | kendoNumber:'##.00' }}</li>\n *  </ul>\n * ```\n */\n\n\nlet NumberPipe = /*#__PURE__*/(() => {\n  class NumberPipe {\n    /**\n     * @hidden\n     */\n    constructor(intlService) {\n      this.intlService = intlService;\n    }\n    /**\n     * Converts a `Number` object into a string based on the specified format.\n     * If no format is provided, the value is formatted as decimal number using the\n     * [`\"n\"`](https://github.com/telerik/kendo-intl/blob/master/docs/num-formatting/index.md#standard) format.\n     *\n     * @param value - The numer that will be formatted.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The locale ID that will be used in place of the default one.\n     * @return - The formatted number.\n     */\n\n\n    transform(value, format, localeId) {\n      if (typeof value === 'string') {\n        value = this.intlService.parseNumber(value);\n      }\n\n      if (value !== null && value !== undefined) {\n        return this.intlService.formatNumber(value, format, localeId);\n      }\n\n      return value;\n    }\n\n  }\n\n  NumberPipe.ɵfac = function NumberPipe_Factory(t) {\n    return new (t || NumberPipe)(i0.ɵɵdirectiveInject(IntlService, 16));\n  };\n\n  NumberPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"kendoNumber\",\n    type: NumberPipe,\n    pure: true\n  });\n  return NumberPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst pipes = [DatePipe, NumberPipe];\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi']docs/ts/latest/guide/ngmodule.html)\n * definition for the Intl services.\n */\n\nlet IntlModule = /*#__PURE__*/(() => {\n  class IntlModule {}\n\n  IntlModule.ɵfac = function IntlModule_Factory(t) {\n    return new (t || IntlModule)();\n  };\n\n  IntlModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IntlModule\n  });\n  IntlModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return IntlModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CldrIntlService, DatePipe, IntlModule, IntlService, NumberPipe, cldrServiceFactory, dateFieldName, dateFormatNames, firstDay, format, formatDate, formatNumber, load, localeData, numberSymbols, parseDate, parseNumber, setData, splitDateFormat, toString, weekendRange };","map":null,"metadata":{},"sourceType":"module"}