{"ast":null,"code":"import { Subject, from, merge } from 'rxjs';\nimport { map, scan } from 'rxjs/operators';\nimport { ChatService } from './chat.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./chat.service\";\nimport * as i2 from \"@progress/kendo-angular-conversational-ui\";\nimport * as i3 from \"@angular/common\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(svc) {\n      this.svc = svc;\n      this.user = {\n        id: 1\n      };\n      this.bot = {\n        id: 0\n      };\n      this.local = new Subject();\n      const hello = {\n        author: this.bot,\n        suggestedActions: [],\n        timestamp: new Date(),\n        text: 'Hello, this is a demo bot. I don`t do much, but I can count symbols!'\n      }; // Merge local and remote messages into a single stream\n\n      this.feed = merge(from([hello]), this.local, this.svc.responses.pipe(map(response => ({\n        author: this.bot,\n        text: response\n      })))).pipe( // ... and emit an array of all messages\n      scan((acc, x) => [...acc, x], []));\n    }\n\n    sendMessage(e) {\n      this.local.next(e.message);\n      this.local.next({\n        author: this.bot,\n        typing: true\n      });\n      this.svc.submit(e.message.text);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ChatService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"my-app\"]],\n    features: [i0.ɵɵProvidersFeature([ChatService])],\n    decls: 2,\n    vars: 4,\n    consts: [[3, \"messages\", \"user\", \"sendMessage\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-chat\", 0);\n        i0.ɵɵlistener(\"sendMessage\", function AppComponent_Template_kendo_chat_sendMessage_0_listener($event) {\n          return ctx.sendMessage($event);\n        });\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"messages\", i0.ɵɵpipeBind1(1, 2, ctx.feed))(\"user\", ctx.user);\n      }\n    },\n    directives: [i2.ChatComponent],\n    pipes: [i3.AsyncPipe],\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}